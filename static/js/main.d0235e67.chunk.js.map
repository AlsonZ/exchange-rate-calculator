{"version":3,"sources":["exchange.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","currencies","setCurrencies","currencyOneRef","useRef","currencyTwoRef","valueOne","setValueOne","valueTwo","setValueTwo","loaded","setLoaded","useEffect","a","fetch","res","json","resData","console","log","rates","fetchData","calculate","loadCurrencies","currencyOne","Object","keys","map","key","index","selected","e","type","getOwnRate","ref","i","value","target","rateOne","current","newValue","roundedValue","Math","round","changeCurrency","className","xlinkHref","icons","onChange","onClick","temp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,sC,8MC2H5BC,MAvHf,WAAgB,IAAD,EAEuBC,mBAAS,IAFhC,mBAENC,EAFM,KAEMC,EAFN,KAGPC,EAAiBC,iBAAO,MACxBC,EAAiBD,iBAAO,MAJjB,EAKmBJ,mBAAS,GAL5B,mBAKNM,EALM,KAKIC,EALJ,OAMmBP,mBAAS,GAN5B,mBAMNQ,EANM,KAMIC,EANJ,OAOeT,oBAAS,GAPxB,mBAONU,EAPM,KAOEC,EAPF,KASbC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACoBC,MAAM,mDAD1B,cACQC,EADR,gBAEwBA,EAAIC,OAF5B,OAEQC,EAFR,OAGEC,QAAQC,IAAIF,GACZf,EAAce,EAAQG,OAJxB,4CADc,uBAAC,WAAD,wBAOdC,KAEA,IAEFT,qBAAU,WACRU,EAAUhB,EAAU,GACpBK,GAAU,KACV,CAACV,IAEH,IAAMsB,EAAiB,SAACC,GACtB,OAAOC,OAAOC,KAAKzB,GAAY0B,KAAI,SAACC,EAAKC,GACvC,MAAW,QAARD,GAAiBJ,EACX,4BAAQM,UAAQ,GAAEF,GAElB,gCAASA,OAKhBN,EAAY,SAACS,EAAGC,GACpB,IAAMC,EAAa,SAACC,GAClB,IAAI,IAAIC,KAAKlC,EACX,GAAGiC,IAAQC,EACT,OAAOlC,EAAWkC,IAIxB,GAAY,IAATH,EAAY,CACb,IAAMI,EAASL,EAAEM,OAASN,EAAEM,OAAOD,MAAQ9B,EAC3CC,EAAY6B,GACZ,IAAIE,EAAUL,EAAW9B,EAAeoC,QAAQH,OAChD,IAAI,IAAID,KAAKlC,EACX,GAAGI,EAAekC,QAAQH,QAAUD,EAAG,CACvC,IAAMK,EAAWJ,EAAQE,EAAUrC,EAAWkC,GACxCM,EAAeC,KAAKC,MAAiB,IAAXH,GAAiB,IACjD/B,EAAYgC,GACZ,YAGG,GAAY,IAATT,EAAY,CACpB,IAAMI,EAAQL,EAAEM,OAASN,EAAEM,OAAOD,MAAQ5B,EAC1CC,EAAY2B,GACZ,IAAIE,EAAUL,EAAW9B,EAAeoC,QAAQH,OAChD,IAAI,IAAID,KAAKlC,EACX,GAAGI,EAAekC,QAAQH,QAAUD,EAAG,CACrC,IAAMK,EAAWJ,EAAQnC,EAAWkC,GAAKG,EACnCG,EAAeC,KAAKC,MAAiB,IAAXH,GAAiB,IACjDjC,EAAYkC,GACZ,YAGC,GAAY,SAATT,EAAiB,CACzB,IAAIM,EAAUL,EAAW9B,EAAeoC,QAAQH,OAChD,IAAI,IAAID,KAAKlC,EACX,GAAGI,EAAekC,QAAQH,QAAUD,EAAG,CACvC,IAAMK,EAAW,EAAIF,EAAUrC,EAAWkC,GAE1C,OADqBO,KAAKC,MAAiB,IAAXH,GAAiB,OAMjDI,EAAiB,SAACZ,GACtBV,EAAU,EAAGU,IAQf,OACE,yBAAKa,UAAU,iBACb,6BACE,yBAAKC,UAAS,UAAKC,IAAL,qBAEhB,wDACA,yBAAKF,UAAU,uBACb,0BAAMA,UAAU,sBACd,4BAAQX,IAAK/B,EAAgB0C,UAAU,aAAaG,SAAU,SAACjB,GAAOa,EAAe,KAClFrB,GAAe,IAElB,2BAAOsB,UAAU,SAASb,KAAK,SAASI,MAAO9B,EAAU0C,SAAU,SAACjB,GAAOT,EAAUS,EAAG,OAE1F,0BAAMc,UAAU,oBACd,4BAAQA,UAAU,SAASI,QApBd,WACnB,IAAIC,EAAO7C,EAAekC,QAAQH,MAClC/B,EAAekC,QAAQH,MAAQjC,EAAeoC,QAAQH,MACtDjC,EAAeoC,QAAQH,MAAQc,EAC/B5B,EAAU,EAAG,KAgBP,QAGA,uBAAGuB,UAAU,iBACVnC,GAAM,YAASP,EAAeoC,QAAQH,MAAhC,cAA2Cd,EAAU,EAAG,QAAxD,YAAmEjB,EAAekC,QAAQH,SAGrG,0BAAMS,UAAU,sBACd,4BAAQX,IAAK7B,EAAgBwC,UAAU,aAAaG,SAAU,SAACjB,GAAOa,EAAe,KAClFrB,GAAe,IAElB,2BAAOsB,UAAU,SAASb,KAAK,SAASI,MAAO5B,EAAUwC,SAAU,SAACjB,GAAOT,EAAUS,EAAG,UCxG9EoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.d0235e67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/exchange.0188afaf.svg\";","import React, { useState, useEffect, useRef } from 'react';\nimport icons from \"./exchange.svg\"\nimport './App.css';\n\nfunction App() {\n\n  const [currencies, setCurrencies] = useState({});\n  const currencyOneRef = useRef(null);\n  const currencyTwoRef = useRef(null);\n  const [valueOne, setValueOne] = useState(1);\n  const [valueTwo, setValueTwo] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch('https://api.exchangeratesapi.io/latest?base=AUD')\n      const resData = await res.json();\n      console.log(resData);\n      setCurrencies(resData.rates);\n    }\n    fetchData();\n    \n  },[]);\n\n  useEffect(() => {\n    calculate(valueOne, 1);\n    setLoaded(true);\n  },[currencies]);\n\n  const loadCurrencies = (currencyOne) => {\n    return(Object.keys(currencies).map((key, index) => {\n      if(key === \"AUD\" && currencyOne) {\n        return(<option selected>{key}</option>);\n      } else {\n        return(<option>{key}</option>);\n      }\n    }))\n  }\n  \n  const calculate = (e, type) => {\n    const getOwnRate = (ref) => {\n      for(let i in currencies) {\n        if(ref === i) {\n          return(currencies[i])\n        }\n      }\n    }\n    if(type === 1) {\n      const value = (e.target ? e.target.value : valueOne);\n      setValueOne(value);\n      let rateOne = getOwnRate(currencyOneRef.current.value);\n      for(let i in currencies) {\n        if(currencyTwoRef.current.value === i) {\n        const newValue = value / rateOne * currencies[i];\n        const roundedValue = Math.round(newValue * 100)/ 100;\n        setValueTwo(roundedValue);\n        break;\n       }\n      }\n    } else if(type === 2) {\n      const value = e.target ? e.target.value : valueTwo;\n      setValueTwo(value);\n      let rateOne = getOwnRate(currencyOneRef.current.value);\n      for(let i in currencies) {\n        if(currencyTwoRef.current.value === i) {\n          const newValue = value / currencies[i] * rateOne;\n          const roundedValue = Math.round(newValue * 100)/ 100;\n          setValueOne(roundedValue);\n          break;\n        }\n       }\n    } else if(type === \"Rate\") {\n      let rateOne = getOwnRate(currencyOneRef.current.value);\n      for(let i in currencies) {\n        if(currencyTwoRef.current.value === i) {\n        const newValue = 1 / rateOne * currencies[i];\n        const roundedValue = Math.round(newValue * 100)/ 100;\n        return(roundedValue)\n       }\n      }\n    }\n  }\n  const changeCurrency = (type) => {\n    calculate(0, type);\n  }\n  const swapCurrency = () => {\n    let temp = currencyTwoRef.current.value;\n    currencyTwoRef.current.value = currencyOneRef.current.value;\n    currencyOneRef.current.value = temp;\n    calculate(0, 1);\n  }\n  return (\n    <div className=\"app-container\">\n      <svg>\n        <use xlinkHref={`${icons}#icon-exchange`}/>\n      </svg>\n      <h1>Exchange Rate Calculator</h1>\n      <div className=\"inner-app-container\">\n        <span className=\"currency-container\">\n          <select ref={currencyOneRef} className=\"currencies\" onChange={(e) => {changeCurrency(1)}}>\n            {loadCurrencies(true)}\n          </select>\n          <input className=\"values\" type=\"number\" value={valueOne} onChange={(e) => {calculate(e, 1)}}></input>\n        </span>\n        <span className=\"middle-container\">\n          <button className=\"button\" onClick={swapCurrency}>\n            Swap\n          </button>\n          <p className=\"exchange-rate\">\n            {loaded && `1 ${currencyOneRef.current.value} = ${calculate(0, \"Rate\")} ${currencyTwoRef.current.value}`}\n          </p>\n        </span>\n        <span className=\"currency-container\">\n          <select ref={currencyTwoRef} className=\"currencies\" onChange={(e) => {changeCurrency(1)}}>\n            {loadCurrencies(false)}\n          </select>\n          <input className=\"values\" type=\"number\" value={valueTwo} onChange={(e) => {calculate(e, 2)}}></input>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}